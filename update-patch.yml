---
- name: Apply Security Updates & Perform Health Check on Linux & Windows
  hosts: all
  gather_facts: yes

  tasks:

    # âœ… Get current date-time for consistent logging
    - name: Get current date and time
      command: date +"%Y-%m-%d_%H-%M"
      register: current_datetime
      delegate_to: localhost
      run_once: true

    # âœ… LINUX PATCHING
    - name: Update package cache (Linux)
      ansible.builtin.apt:
        update_cache: yes
      become: yes
      when: ansible_os_family == "Debian"

    - name: Install security updates (Linux)
      ansible.builtin.apt:
        upgrade: dist
        autoremove: yes
      become: yes
      when: ansible_os_family == "Debian"

    - name: Check if a reboot is required (Linux)
      stat:
        path: /var/run/reboot-required
      register: reboot_required_file
      when: ansible_os_family == "Debian"

    - name: Reboot the system if required (Linux)
      reboot:
      when: reboot_required_file.stat.exists | default(false) and ansible_os_family == "Debian"

    # âœ… WINDOWS PATCHING
    - name: Install Windows Updates (Security & Definition Updates)
      win_updates:
        category_names:
          - SecurityUpdates
          - DefinitionUpdates
          - UpdateRollups
        reboot: yes
      register: windows_updates
      when: ansible_os_family == "Windows"

    # âœ… LINUX SYSTEM HEALTH CHECKS
    - name: Check Uptime (Linux)
      command: uptime
      register: linux_uptime
      when: ansible_os_family == "Debian"

    - name: Check Disk Usage (Linux)
      command: df -h /
      register: linux_disk_usage
      when: ansible_os_family == "Debian"

    - name: Check Memory Usage (Linux)
      command: free -m
      register: linux_memory_usage
      when: ansible_os_family == "Debian"

    - name: Check CPU Load (Linux)
      shell: top -bn1 | grep "load average"
      register: linux_cpu_load
      when: ansible_os_family == "Debian"

    - name: Check Running Services (Linux)
      command: systemctl list-units --type=service --state=running
      register: linux_running_services
      when: ansible_os_family == "Debian"

    # âœ… WINDOWS SYSTEM HEALTH CHECKS
    - name: Get System Boot Time (Windows)
      win_shell: "(Get-CimInstance Win32_OperatingSystem).LastBootUpTime"
      register: windows_uptime
      when: ansible_os_family == "Windows"

    - name: Get Disk Usage (Windows)
      win_shell: "Get-PSDrive C | Select-Object Used,Free,Size"
      register: windows_disk_usage
      when: ansible_os_family == "Windows"

    - name: Get Memory Usage (Windows)
      win_shell: "Get-CimInstance Win32_OperatingSystem | Select FreePhysicalMemory,TotalVisibleMemorySize"
      register: windows_memory_usage
      when: ansible_os_family == "Windows"

    - name: Get CPU Load (Windows)
      win_shell: "Get-Counter '\\Processor(_Total)\\% Processor Time'"
      register: windows_cpu_load
      when: ansible_os_family == "Windows"

    - name: Get Running Processes (Windows)
      win_shell: "Get-Process | Select-Object ProcessName,CPU"
      register: windows_processes
      when: ansible_os_family == "Windows"

    # âœ… FORMAT LOG OUTPUT (LINUX)
    - name: Format Health Check Output (Linux)
      set_fact:
        formatted_log_linux: |
          ======================================================
          âœ… Server: {{ inventory_hostname }} (Linux)
          ðŸ•’ Timestamp: {{ current_datetime.stdout }}
          ======================================================

          ðŸ”¹ **System Uptime**
          --------------------
          {{ linux_uptime.stdout | default('N/A') }}

          ðŸ”¹ **Disk Usage**
          -----------------
          {{ linux_disk_usage.stdout | default('N/A') }}

          ðŸ”¹ **Memory Usage**
          -------------------
          {{ linux_memory_usage.stdout | default('N/A') }}

          ðŸ”¹ **CPU Load**
          ---------------
          {{ linux_cpu_load.stdout | default('N/A') }}

          ðŸ”¹ **Running Services**
          -----------------------
          {{ linux_running_services.stdout | default('N/A') }}

          ðŸ”¹ **Linux Updates Installed**
          ------------------------------
          - {{ windows_updates.updates | default([]) }}

          ======================================================

    # âœ… SAVE LOG FILE (LINUX)
    - name: Save Formatted Log File (Linux)
      become: yes
      local_action:
        module: copy
        content: "{{ formatted_log_linux }}"
        dest: "/var/log/ansible_health_checks_{{ inventory_hostname }}_{{ current_datetime.stdout }}.log"
      when: ansible_os_family == "Debian"

    # âœ… FORMAT LOG OUTPUT (WINDOWS)
    - name: Format Health Check Output (Windows)
      set_fact:
        formatted_log_windows: |
          ======================================================
          âœ… Server: {{ inventory_hostname }} (Windows)
          ðŸ•’ Timestamp: {{ current_datetime.stdout }}
          ======================================================

          ðŸ”¹ **System Boot Time**
          -----------------------
          {{ windows_uptime.stdout | default('N/A') }}

          ðŸ”¹ **Disk Usage**
          -----------------
          {{ windows_disk_usage.stdout | default('N/A') }}

          ðŸ”¹ **Memory Usage**
          -------------------
          Free: {{ windows_memory_usage.stdout | default('N/A') }}

          ðŸ”¹ **CPU Load**
          ---------------
          {{ windows_cpu_load.stdout | default('N/A') }}

          ðŸ”¹ **Running Processes**
          ------------------------
          {{ windows_processes.stdout | default('N/A') }}

          ðŸ”¹ **Windows Updates Installed**
          ---------------------------------
          {% for update in windows_updates.updates | default([]) %}
          - {{ update.title }}
          {% else %}
          No updates installed.
          {% endfor %}

          ======================================================

    # âœ… SAVE LOG FILE (WINDOWS)
    - name: Save Formatted Log File (Windows) on Control Node
      delegate_to: localhost
      run_once: false
      copy:
        content: "{{ formatted_log_windows }}"
        dest: "/var/log/ansible_health_checks_{{ inventory_hostname }}_{{ current_datetime.stdout }}.log"
      when: ansible_os_family == "Windows"
